<h1><%= "#{match.name}" %>
<span style="font-size:smaller;">&nbsp;&nbsp;<a href="/matches/">Other matches</a></span>
</h1>

<% unless downlevel? %>
<script id="include_board_actions" src="/javascripts/board_action.js"></script>
<script id="define_all_boards_till_now_as_JS_objects" src="<%= url_for( :action => 'boards', :format => 'js' ) %>" type="text/javascript"></script>
<script id="next_move_url" type="text/javascript">
  // this url will be polled for updates, and when a move has been made, this url
   // will be replaced by the new url to poll for updates
   // TODO its clear this will only allow one match to be tracked per DOM 
   //  if its ever to be the case that one DOM manages several matches, some scoping will be needed
   var next_move_url = '<%= url_for( :action => :status, :move => match.moves.length + 1 ) %>';
</script>
<script id="invoke_next_move_poller_if_your_move" type="text/javascript">
 //<![CDATA[
  //the instance of this_updater is registered so it can be destroyed when it is your move, and theres no need to poll.
//]]>
</script>
<% end %>


<script id="websocket">

var match_id = <%= @match.id %>;

if(!("WebSocket" in window)) {
  alert("Sorry, the build of your browser does not support WebSockets. Please use latest Chrome or Webkit nightly. Going to back to polling");


  <% if ! your_turn %>
    this_updater = new PeriodicalExecuter(
      function(){
        new Ajax.Request(
          next_move_url, 
          {asynchronous:true, evalScripts:true, method:'get'} 
        )
      }, 10
    )
  <% end %>

}
else {
  
  ws = new WebSocket("ws://localhost:8080/");
  ws.onmessage = function(evt) { 
    alert(evt.data);
    data = eval("(" + evt.data + ")");
    if( match_id != data.match)  {
        alert('yuk getting data from another match');
    }
    
   new Ajax.Request(
      "/matches/" +match_id + "/status?move=" + data.move, 
      {asynchronous:true, evalScripts:true, method:'get'} 
    );
  };
  ws.onclose = function() {
    alert("socket closed");
  };
  ws.onopen = function() {
    //alert("connected...");
  }
 };
</script>


<div id="board_region">
  <!-- TODO better visuals for move_indicator - paul -->
  <div id="move_indicators">
    <span id="move_indicator_yours" class="move_indicator <%= your_turn  ? "next_to_move"  : "" -%>">Yours</span> 
    <span id="move_indicator_theirs" class="move_indicator <%= ! your_turn  ? "next_to_move"  : "" -%>">Theirs</span> 
 </div>

  <div id="js_updatable_board">
    <%= render :partial => "board" %>
   </div>
</div>

<div id="actions_region">  

  <% if current_player_side %>
  <div id="move_creator_parent" >
    <%= render :partial => "move_maker" %>
  </div>
  <div id="game_actions">
    Actions: 
    <%= link_to "Resign", 
	  url_for(:action => 'resign'), 
          :confirm => 'Are you truly ready to accept disgrace and sulk back to the rock from under which you came ?' 
    %>
    <%= link_to "PGN", 
	  match_url(@match, :format=>'pgn'), 
          :title => 'PGN is the most common notation for a game, consisting of a formatted list of every move that has occurred, in algebraic notation.' 
    %>
    <%= link_to "FEN", 
          match_url(@match, :format=>'fen'), 
          :title => 'FEN is an alternative notation for the state of a game, where the move history may not be known, but all information necessary to resume the game is in the FEN description.' 
    %>
    &nbsp;&nbsp; 
    Playback: 
    |&lt;   
    <a href="#" onclick="previous_board(); return false;"><b>&lt;</b></a>
    <a href="#" onclick="next_board();     return false;"><b>&gt;</b></a> 
    &gt;|
  </div>
  <% end %>

  <div id="move_list" class="status_tab">
    <%= render :partial => 'move_list' %>
  </div>
  
  <% if current_player_side %>
  <div id="chat_container" class="status_tab">
    <script type="text/javascript" id="update_chat_periodically">
      //<![CDATA[
      new PeriodicalExecuter(
        function() {
          new Ajax.Updater('chat',
	                   '<%= match_chat_url(match) %>', 
                           {asynchronous:true, evalScripts:true, method:'get'})}, 7);
    </script>
    <div id="chat">
      <%= render :partial => 'chats/chats', :locals => { :chats => chats } %>
    </div>
    <div id="chat_form">
      <% remote_form_for( Chat.new, :url => match_chat_path(match), :update => 'chat' ) do |f| %>
      <%= f.text_field :text, :style => 'width:150px' %>
      <%= f.submit 'Send', :onclick => "window.setTimeout(function(){$('chat_text').clear();}, 200)" %>
      <% end %>
    </div>
  </div>
  <% end %>

  <div id="graveyard">
    <%= render :partial => 'graveyard' %>
  </div>

</div>

<div class="instructions">
  Instructions: Ideally you move by drag and drop. It's not the smoothest, but should work.
  Alternately you can enter the from and to coordinates (d2 d4) in the boxes and then Submit Move. 
  You can also enter the Algebraic Notation if you're showing off ( Nbxc4 ). To castle drag king
  to its castling square. The move is submitted when you drop the piece or hit enter. 
  Takebacks are not enabled. Have fun !
</div>


<% content_for :autoexec_javascripts do %>

  //allow hash notation (match/N#something) to refer to a specific move by number, counting from 1
  move_wanted = document.location.hash.substr(1);
  if(move_wanted){
   set_board(move_wanted,  (move_wanted== <%= move_count %> ? current_allowed_moves : []) );
  }
<% end %>

